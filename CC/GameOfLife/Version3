#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>

typedef struct Cell
{
  int current;
  int prev;
  int changed;
}Cell;

void ConvertToCellArray(char *s, int length, Cell* life);
void PrintCurrentCellArray(Cell *life, int length);
void PrintPreviousCellArray(Cell *life, int length);
void SetPrevVal(Cell *cell, int value);
int CheckCells(Cell c1, Cell c2);
int PropogateAndCheck(Cell **life, int index, int length);
void GetPreviousState(Cell **life, int length);


int main()
{
  char input[10];
  scanf("%s", input); 
  int length = strlen(input);
  Cell *life = (Cell *)malloc(length * sizeof(Cell));
  ConvertToCellArray(input, length, life);
 
  GetPreviousState(&life, length);
  return 0;
}

void ConvertToCellArray(char *s, int length, Cell* life)
{
  int i=0;
  for(i =0; i < length; i++)
    {
      if(s[i] != '1' && s[i] != '0')
	{
	  printf("Invalid string..");
	  return;
	}
      life[i].current = (s[i] - '0');
      life[i].prev = -1;
      life[i].changed = -1;      
    }
}

void PrintCurrentCellArray(Cell *life, int length)
{
  int i=0;
  for(i=0; i<length; i++)
    {
      printf("%d", life[i].current);
    }
}

void PrintPreviousCellArray(Cell *life, int length)
{
  int i=0;
  for(i=0; i<length; i++)
    {
      printf("%d", life[i].prev);
    }
}

void SetPrevVal(Cell *cell, int value)
{
  cell->prev = value;
  cell->changed = (cell->prev == cell->current) ? 0 : 1;
  return;
}


int CheckCells(Cell c1, Cell c2)
{
  return ((c1.current == c2.current) && (c1.prev == c2.prev) && (c1.changed == c2.changed)) ? 1 : 0;
}


int PropogateAndCheck(Cell **life, int index, int length)
{
  
  int last = (length-1);
  Cell testNode;
  testNode.current =  (*life)[last].current;
  testNode.prev = (*life)[last].prev;
  testNode.changed = (*life)[last].changed;

  Cell firstNode;
  firstNode.current =  (*life)[index].current;
  firstNode.prev = (*life)[index].prev;
  firstNode.changed = (*life)[index].changed;


  int current = index+1;
  Cell *temp = *life;
  
  int i=0;
  for(i=current; i<last; i++)
    {
      int val = (temp[i].changed == 1) ? 1 - temp[i-1].prev : temp[i-1].prev;
       SetPrevVal(&temp[i+1], val);
    } 

  if(!CheckCells(temp[i], testNode))
    {
      return 0;
    }
 
  else
    {
      int val = (temp[i].changed == 1) ? 1 - temp[last-1].prev : temp[last-1].prev;
       SetPrevVal(&temp[0], val);
       return CheckCells(temp[index], firstNode);
    }   
}

void GetPreviousState(Cell **life, int length)
{
  int i,j = 0;
  static int solution = 0;
  int prevState[length];
  

  int ch = 0;

  for(ch = 0; ch < 2; ch++)
    {
      life[0]->changed = ch;
      for(j=0; j<2; j++)
	{
	  life[0]->prev = (ch == 0) ? life[0]->current : 1-life[0]->current;
	  int valForNext = (ch == 0) ? j : 1-j;
	  SetPrevVal((*life)+1, valForNext);	 
	  SetPrevVal((*life) + length-1, j);
 
	  int val = PropogateAndCheck(life, 0, length);
	  if(solution == 0 && val > 0)
	    {	      
	      for(i=0; i<length; i++)
		{
		  prevState[i] = (*life)[i].prev;
		}		
	      solution = 1;
	    }	
	 else if(solution == 1 && val > 1)
	    {
	      printf("Multiple Solutions");
	      return;
	    }
	}
    }
  if(solution == 0)
    {
      printf("No Solution");
      return;
    }
  else if(solution == 1)
    {
      for(i=0; i<length; i++)
	{
	  printf("%d", prevState[i]);
	}
      printf("\n");
      return;
    }
}
